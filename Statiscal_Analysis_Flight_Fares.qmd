---
title: "STATISTICAL ANALYSIS OF FLIGHT FARES"
author:   
  - Anjolaoluwa Olatunbosun   
  - Ayoola Ayetigbo
  - Odomero Omokahfe
date: today
editor: source
format:
  html:
    toc: true
    toc-title: TABLE OF CONTENTS
    toc-location: left
    theme: 
      light: lumen
      dark: darkly
execute:
  echo: fenced
  warning: false
---

## INTRODUCTION

This project converts and extends a Python notebook on "**Statistical Analysis & EDA for flight fare**" using R and Quarto notebook. The original notebook can be found on Kaggle at <https://www.kaggle.com/code/ananyanandi02/statistical-analysis-eda-for-flight-fare/notebook>. The dataset contains 11 variables and 10683 observations. The variables are outlined below:
  1. Airline: The name of the airline company.
2. Date of Journey: The date of the flight journey.
3. Source: The source or starting location of the flight.
4. Destination: The destination or final location of the flight.
5. Route: The flight route from the source to the destination.
6. Departure time: The time of departure for the flight.
7. Arrival time: The time of arrival at the destination.
8. Duration: The duration/length of the flight.
9. Total stops: The number of stops during the flight journey.
10. Additional info: Additional information about the flight.
11. Price: The fare or price of the flight ticket.

##### LOAD REQUIRED LIBRARIES

```{r}
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(png)
library(grid)
library(lattice)
library(readxl)
library(lubridate)
library(scales)
library(stargazer)
library(lmtest)
library(tseries)
```

##### LOAD DATASET

```{r}
flight_data <- read_excel("data/Flight_data.xlsx")
```

The flight dataset comprises 10,683 observations with 11 variables (10 independent variables and 1 target variable)

```{r}
dim(flight_data)
```

To print the top 5 rows of our dataset

```{r}
head(flight_data, 5)
```


## EXPLORATORY DATA ANALYSIS

##### HANDLING MISSING DATA

To check for missing values and drop missing values

```{r}
print(colSums(is.na(flight_data)))
flight_data <- na.omit(flight_data)

```

##### CLEAN DATE OF JOURNEY VARIABLE

To extract day, month, year, and weekday from Date of Journey

```{r}
flight_data$Journey_Day <- day(dmy(flight_data$Date_of_Journey))
flight_data$Journey_Month <- month(dmy(flight_data$Date_of_Journey))
flight_data$Journey_Year <- year(dmy(flight_data$Date_of_Journey))
flight_data$weekday <- wday(dmy(flight_data$Date_of_Journey), label = TRUE)

table(flight_data$Journey_Year)
table(flight_data$Journey_Month)
```

Remove the Date_of_Journey and Journey_Year column

```{r}
flight_data$Date_of_Journey <- NULL
flight_data$Journey_Year <- NULL
```

"New Delhi" and "Delhi" seems to be same location.

```{r}
flight_data$Destination[flight_data$Destination == "New Delhi"] <- "Delhi"
```

Now we can see the list of column names in our dataset

```{r}
names(flight_data)
```

##### CLEAN DURATION VARIABLE

Converting duration into minutes. Firstly we define duration function

```{r}
duration <- function(test) {
  test <- gsub("\\s+", "", test) # remove white spaces
  total <- strsplit(test, split = "[a-zA-Z]+")[[1]] # split the string into substrings
  to <- total[1]
  hrs <- as.numeric(gsub("[^[:digit:]]", "", to)) * 60 # extract the hours and convert to minutes
  if (length(total) == 2) {
    mint <- as.numeric(gsub("[^[:digit:]]", "", total[2])) # extract the minutes
    hrs <- hrs + mint
  }
  return(as.character(hrs))
}

```

Apply duration function to the "Duration" column

```{r}
flight_data$Duration <- sapply(flight_data$Duration, duration)
```

Get number of unique values in "Duration" column

```{r}
n_distinct(flight_data$Duration)
```

##### CLEAN DEP TIME AND ARRIVAL TIME VARIABLE

To get whether its a morning,evening,night or afternoon flight from departure time & arrival time of the flight, we will define deparrtime function first

```{r}
deparrtime <- function(x) {
  x <- gsub("\\s+", "", x) # remove white spaces
  tt <- as.numeric(strsplit(x, split = ":")[[1]][1]) # extract the hour
  if (tt >= 16 & tt < 21) {
    x <- "Evening"
  } else if (tt >= 21 | tt < 5) {
    x <- "Night"
  } else if (tt >= 5 & tt < 11) {
    x <- "Morning"
  } else if (tt >= 11 & tt < 16) {
    x <- "Afternoon"
  }
  return(x)
}

```

Then we will apply deparrtime function to the "Dep_Time" and "Arrival_Time" columns

```{r}
flight_data$Dep_Time <- sapply(flight_data$Dep_Time, deparrtime)
flight_data$Arrival_Time <- sapply(flight_data$Arrival_Time, deparrtime)
```

##### CLEAN TOTAL STOPS VARIABLE

Firstly, define stops function to Convert total_stops to 0,1,2,3 etc.

```{r}
stops <- function(x) {
  ifelse(x == 'non-stop', '0', substr(x, 1, 1))
}
```

Then we apply stops function to the "Total_Stops" column

```{r}
flight_data$Total_Stops <- sapply(flight_data$Total_Stops, stops)
```

##### FURTHER DATA CLEANING

-   Replace "No info" with "No Info" in the "Additional_Info" column

-   Drop the "Route" column

```{r}
flight_data$Additional_Info <- ifelse(flight_data$Additional_Info == "No info", "No Info", flight_data$Additional_Info)

flight_data <- flight_data[, !(names(flight_data) %in% c("Route"))]
```

View the first two rows of the data and get information about the data frame

```{r}
head(flight_data, 2)
str(flight_data)
```

Make a copy of the data frame

```{r}
flight_df <- flight_data
```

Convert columns to the specified data types

```{r}

flight_df$Duration <- as.integer(flight_df$Duration) 

for (col in colnames(flight_df)) {
  if (is.character(flight_df[[col]])) {
    flight_df[[col]] <- as.factor(flight_df[[col]])
  }
}
```

Replace values in the "Journey_Month" column

```{r}
flight_df$Journey_Month <- factor(flight_df$Journey_Month, levels = c(3, 4, 5, 6), labels = c("March", "April", "May", "June"))


```

::: {.panel-tabset}

### JOURNEY MONTH VS TOTAL FARE

This plot visualizes the total each month with total fare per month

```{r}
v1 <- ggplot(flight_df, aes(x = Journey_Month, y = Price, fill = Journey_Month)) + 
  geom_bar(stat = "summary", fun = sum) + 
  ggtitle("Monthv/sPrice") + 
  ylab("Price") + 
  xlab("Month of booking") + 
  scale_fill_brewer(palette = "Set1") +  # add color scale
  scale_y_continuous(labels = function(x) format(x, scientific = FALSE), 
                     breaks = seq(0, 30000000, 5000000)) +
  theme(axis.text.x = element_text(angle = 80, vjust = 0.5, hjust=1)) 

v1 

```

### COUNT OF FLIGHTS PER MONTH

Firstly create a data frame from the top_month data then plot a bar plot

```{r}
top_month <- head(sort(table(flight_df$Journey_Month), decreasing = TRUE), 10)
top_month_df <- data.frame(month = names(top_month), count = top_month)

ggplot(top_month_df, aes(x = month, y = count.Freq, fill = month)) +
  geom_bar(stat = "identity") +
  ggtitle("Count of flights per month") +
  geom_text(aes(label = count.Freq), vjust = -0.5, color = "black", size = 4)+
  ylab("Number of Bookings") +
  xlab("Month") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

Compute the average price for each month then create a bar plot showing the average price for each month

```{r}
monthly_avg <- flight_df %>%
  group_by(Journey_Month) %>%
  summarise(avg_price = mean(Price))
ggplot(monthly_avg, aes(x = Journey_Month, y = avg_price, fill = Journey_Month)) +
  geom_bar(stat = "identity") +
  ggtitle("Journey Month vs Average Fare") +
  xlab("Month of Journey") +
  ylab("Average Fare") +
  theme_bw()
```

Create a box plot showing the distribution of prices for each destination

```{r}
ggplot(flight_df, aes(x = Destination, y = Price, fill = Destination)) +
  geom_boxplot() +
  ggtitle("Destination vs Average Price") +
  xlab("Destination") +
  ylab("Average Price") +
  theme_bw() +
  coord_flip()
```

### SOURCE VS AVERAGE PRICE

```{r}
ggplot(flight_data %>% arrange(desc(Price)), aes(Source, Price, fill = Source)) + 
  geom_boxplot() + 
  theme_bw() + 
  labs(title = "Source vs Average Price")
```

### COUNT OF FLIGHTS VS AIRLINE

```{r}
ggplot(flight_data, aes(Airline, fill= Airline)) + 
  geom_bar() + 
  theme_bw() + 
  labs(title = "Count of flights with different Airlines", 
       x = "Airline", 
       y = "Count of flights") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + 
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5)
```

### AIRLINE VS AVERAGE PRICE 

Outliers can be spotted in flight prices.

```{r}
ggplot(flight_data %>% arrange(desc(Price)), aes(Airline, Price, fill= Airline)) + 
  geom_boxplot() + 
  theme_bw() + 
  labs(title = "Airline vs Average Price")
```

### DURATION VS AVERAGE PRICE

```{r}
ggplot(flight_df, aes(Duration, Price)) + 
  geom_point() + 
  theme_bw() + 
  labs(title = "Duration vs Average Price")
```

### DEPARTURE TIME VS AVERAGE PRICE

```{r}
ggplot(flight_data, aes(Dep_Time, Price, fill= Dep_Time)) + 
  geom_bar(stat = "summary", fun = "mean") + 
  theme_bw() + 
  labs(title = "Departure Time vs Average Price", 
       x = "Time of departure", 
       y = "Price") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

### TIME OF DEPARTURE VS COUNT OF FLIGHTS

```{r}
top_time <- flight_data %>% 
  count(Dep_Time) %>% 
  top_n(10, n)

ggplot(top_time, aes(Dep_Time, n)) + 
  geom_bar(stat = "identity", fill = "purple") + 
  geom_text(aes(label = n), vjust = -0.5, color = "black", size = 4) +
  theme_bw() + 
  labs(title = "Top 10 Departure Time vs Count of Flights", 
       x = "Time of departure", 
       y = "Count of flights") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

### TIME OF ARRIVAL VS AVERAGE PRICE

```{r}
ggplot(flight_data, aes(Arrival_Time, Price)) + 
  geom_bar(stat = "summary", fun = "mean", fill = "red") + 
  theme_bw() + 
  labs(title = "Time of Arrival vs Average Price", 
       x = "Arrival Time", 
       y = "Price") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

### TOTAL STOPS VS AVERAGE PRICE

```{r}
ggplot(flight_data, aes(Total_Stops, Price)) + 
  geom_bar(stat = "summary", fun = "mean", fill = "steelblue") + 
  theme_bw() + 
  labs(title = "Number of Stops vs Average Price", 
       x = "Total Stops", 
       y = "Price") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

### WEEKDAY VS AVERAGE PRICE

```{r}
ggplot(flight_data, aes(weekday, Price)) + 
  geom_bar(stat = "summary", fun = "mean", fill= "brown") +
  theme_bw() + 
  labs(title = "Weekday vs Average Price", x = "Weekday", y = "Price") + 
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
```

:::

## CORRELATION ANALYSIS

##### Adding additional libraries

```{r}
library(ggpubr)
library(ggExtra)
library(devtools)

```

```{r}
head(flight_data, 5)
```

```{r}
str(flight_data)
```

```{r}
flight_data$Duration <- as.integer(flight_data$Duration)
```

##### Plotting the correlation between *Duration* and *Price*

```{r}
ggplot(flight_data, aes(x = Duration, y = Price)) + 
  geom_point() + 
  geom_smooth(method = "lm", color = "red") +
  labs(x = "Duration (in minutes)", y = "Price")
```

*From the plot above, the relationship might be linear. We might need to check if the data from each of the 2 variables follow a normal distribution?*

*Shapiro test would have been perfect for this but to use it, sample size must be between 3 and 5000.*

*We therefore look at the normality plot using the function: ggpubr::ggqqplot()*

##### Plotting to check for normality
::: panel-tabset

###### Duration

```{r}
ggqqplot(flight_data$Duration, ylab = "Duration")
```

###### Price

```{r}
ggqqplot(flight_data$Price, ylab = "Price")
```

:::

From the normality plots, we conclude that both populations may come from normal distributions.

##### correlation coefficient interpretation

-1 indicates a strong negative correlation : this means that every time x increases, y decreases

0 means that there is no association between the two variables (x and y)

1 indicates a strong positive correlation : this means that y increases with x

##### Pearson correlation test

```{r}
res <- cor.test(flight_data$Duration, flight_data$Price, method = "pearson")
res
```

The p-value of the test is **2.2e-16**, which is less than the significance level alpha = 0.05.

We can conclude that *Duration* and *Price* are significantly correlated with a correlation coefficient of **0.5103211** and p-value of **\< 2.2e-16**.

##### Kendall rank correlation test

```{r}
res2 <- cor.test(flight_data$Duration, flight_data$Price,  method="kendall")
res2
```

NOTE: **tau** is the Kendall correlation coefficient. The correlation coefficient between *Duration* and *Price* is **0.500113** and the p-value is **\< 2.2e-16**.

##### Spearman rank correlation coefficient

```{r}
res3 <-cor.test(flight_data$Duration, flight_data$Price,  method = "spearman")
res3
```

NOTE: **rho** is the Spearman's correlation coefficient. The correlation coefficient between *Duration* and *Price* is **0.69344** and the p-value is **\< 2.2e-16.**

##### Correlation Plot with Frequency Distribution

```{r}
p <- ggplot(flight_data, aes(x = Duration, y = Price)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  stat_cor(aes(label = paste("r = ", round(..r.., 2), "\n", "p = ", 
                             round(..p.., 2))), label.x = 0.9, label.y = 0.9, 
           size = 4, color = "red")

ggMarginal(p, type = "histogram", bins = 20)
```

We have a p-value \< 0.05, hence we accept H1 and decide the target variable and continuous independent variable are correlated. **r = 0.51** means they are moderately related.

## REGRESSION ANALYSIS

**Further Data Preparation**

```{r}
flight_df$weekday <- as.character(flight_df$weekday)

# let's generate logarithm of flight prices and duration
colnames(flight_df)
flight_df$lnPrice = log(flight_df$Price)
flight_df$lnDuration = log(flight_df$Duration)
```

**General model with simple linear regression**

```{r}
flight_reg1 = lm(lnPrice~Airline+Source+Dep_Time
                 +Arrival_Time+Duration+Total_Stops
                 +Additional_Info+Journey_Day+Journey_Month
                 +weekday, data=flight_df)
```

**Breusch's and Pagan's test**

H0: homoscedasticity

H1: heteroscedasticity

```{r}
bptest(flight_reg1, studentize=TRUE)
```

P-value is less than 0.05, therefore we do not reject the null hypothesis implying variance of residuals is constant.

**Is the error term of the model normally distributed?**

```{r}
jarque.bera.test(flight_reg1$residuals)
```

With p-value \< 0.05, we do not reject the null hypothesis stating that Residuals are normally distributed.

**Let's fit a second model using Duration in logarithm**

```{r}
flight_reg2 = lm(lnPrice~Airline+Source+Dep_Time
                 +Arrival_Time+lnDuration+Total_Stops
                 +Additional_Info+Journey_Day+Journey_Month
                 +weekday, data=flight_df)

```

**Let's fit a third model introducing a new feature Source-Destination ( a combination of Source& Destination as a single feature) while excluding insignificant features like Source and Dep_time variables**

```{r}
flight_df$SourceDest <- paste(flight_df$Source,flight_df$Destination,sep = "-")

flight_reg3 = lm(lnPrice~Airline+SourceDest+Arrival_Time
                 +Total_Stops+lnDuration+Journey_Day+Additional_Info
                 +Journey_Day+Journey_Month+weekday, data
                 =flight_df)
```

**Let's fit a fourth model excluding Additional_info variable**

```{r}
flight_reg4 = lm(lnPrice~Airline+SourceDest+Arrival_Time+
                   Total_Stops+Journey_Day+lnDuration+Journey_Day+
                   Journey_Month+weekday, data=flight_df)
```

**All fitted regression models**

```{r}
stargazer(flight_reg1, flight_reg2, flight_reg3,flight_reg4, type="text"
          ,align=TRUE, style="default", df=FALSE)
```

**lnPrice = β0 + β1Airline + β2SourceDest + β3Arrival_Time + β4Total_Stops + β5lnDuration + β6Journey_Day + β7Journey_Month + β8Additional_Info + β9weekday + εi**

The third model seem to be a better fit as it has a similar R2 of 79% as the first and second model thereby explaining same amount of variability after excluding insignificant variable such as Departure time, and combining Source& Destination as a single feature.

In comparison to March and Friday,prices are lower on other months and week days respectively. Additional number of stops significantly increase flight prices.

## CONCLUSION

This project extensively used R to carry out data cleaning, feature engineering, exploratory data analysis using data visualization and correlation analysis, as well as data modelling using simple linear regression model-lm(). The dataset had a total of 10,682 observations with 10 independent variables and a continuous dependent variable (flight prices).

Variables such as weekday, month, journey day, total stops, duration, arrival time, source to destination, and airlines significantly impact flight prices.
